#!/bin/bash

:<<!
这就是批量注释
!
echo "HelloWorld"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

:<<!
1. 定义变量
!
var_1=123
var_2='abc'
var_3="def"


:<<!
2. 使用变量
!
echo "2. 使用变量 的输出："
echo "$var_1"
echo ${var_2}
echo " "


:<<!
3. ''和""的区别
双引号""可以接受${var}的方式进行变量拼接，但是单引号''只是单纯的字符串拼接
!
echo "3. 单引号和双引号区别 的输出："
var_4="${var_2}aaaa"
echo ${var_4}

var_5='${var_2}aaaa'
echo "${var_5}"
echo " "


:<<!
4. 将Shell命令的结果赋值给变量：
var=`pwd`
var=${pwd}
!
echo "将Shell命令的结果赋值给变量："
var_6=`pwd`
echo "$var_6"
var_6=$(ls -h)
echo ${var_6}
echo " "


:<<!
5. 删除变量：
!
unset var_6
echo "删除var_6后，输出为："
echo ${var_6}


:<<!
6. 特殊变量：
$0：当前脚本的文件名
$n：(n >= 1) 传输给脚本或函数的参数，n是一个数字，表示是第几个参数，如第一个参数是$1，第二个参数是$2
$#：传递给脚本或函数的参数个数
$*：传递给脚本或函数的所有参数
$@：传递给脚本或函数的所有参数。在被双引号括起来前，$@和$*没任何不同，但是被括起来后，$*会将导入参数看做一个整体
$?：上个命令退出的状态或者获取函数的返回值
$$：当前进程的ID，对于Shell脚本，就是这些脚本所在进程ID
!
echo "\$0"





